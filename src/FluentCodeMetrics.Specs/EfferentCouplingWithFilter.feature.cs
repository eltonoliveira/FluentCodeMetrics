// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FluentCodeMetrics.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calcular Acoplamento Eferente (Ce) com um Filtro")]
    public partial class CalcularAcoplamentoEferenteCeComUmFiltroFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EfferentCouplingWithFilter.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Calcular Acoplamento Eferente (Ce) com um Filtro", "\r\nElvis deseja calcular o acoplamento eferente para alguns tipos,\r\nentretanto, el" +
                    "e deseja que alguns tipos sejam ignorados na contagem.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcular Acoplamento Eferente para um tipo")]
        [NUnit.Framework.TestCaseAttribute("Samples.EmptyClass", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleArgCtor", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleArgVoidMethod", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.FeeMethod", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.DateTimeArgDateTimeMethod", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleProperty", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleField", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.ExceptionRaiser", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleNonAutoProperty", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleEvent", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.Attributes", "4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.StaticMember", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.ClassDependsOnASubClass", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.StaticPropertyAndMethodCall", "2", new string[0])]
        public virtual void CalcularAcoplamentoEferenteParaUmTipo(string tipo, string ce, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcular Acoplamento Eferente para um tipo", exampleTags);
#line 8
 this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given(string.Format("que tenho um {0}", tipo));
#line 10
  testRunner.When("desejo obter seu acoplamento eferente");
#line 11
  testRunner.And("tenho um fitro de referências que desejo ignorar");
#line 12
  testRunner.And("esse filtro relaciona System.Runtime.TargetedPatchingOptOutAttribute");
#line 13
  testRunner.And("esse filtro relaciona System.Security.SecuritySafeCriticalAttribute");
#line 14
  testRunner.And("esse filtro relaciona System.Runtime.ConstrainedExecution.ReliabilityContractAttr" +
                    "ibute");
#line 15
  testRunner.And("esse filtro relaciona System.Runtime.CompilerServices.CompilerGeneratedAttribute");
#line 16
  testRunner.And("esse filtro relaciona System.Object");
#line 17
  testRunner.And("esse filtro relaciona System.Int32");
#line 18
  testRunner.And("esse filtro relaciona System.String");
#line 19
  testRunner.And("esse filtro relaciona System.Boolean");
#line 20
  testRunner.And("esse filtro relaciona System.Type");
#line 21
  testRunner.Then(string.Format("obtenho {0}", ce));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcular Acoplamento Eferente para um tipo, considerando apenas tipos do mesmo as" +
            "sembly")]
        [NUnit.Framework.TestCaseAttribute("Samples.EmptyClass", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleArgCtor", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleArgVoidMethod", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.FeeMethod", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.DateTimeArgDateTimeMethod", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleProperty", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleField", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.ExceptionRaiser", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleNonAutoProperty", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.SingleEvent", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.Attributes", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.StaticMember", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.ClassDependsOnASubClass", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.StaticPropertyAndMethodCall", "0", new string[0])]
        public virtual void CalcularAcoplamentoEferenteParaUmTipoConsiderandoApenasTiposDoMesmoAssembly(string tipo, string ce, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcular Acoplamento Eferente para um tipo, considerando apenas tipos do mesmo as" +
                    "sembly", exampleTags);
#line 40
 this.ScenarioSetup(scenarioInfo);
#line 41
  testRunner.Given(string.Format("que tenho um {0}", tipo));
#line 42
  testRunner.When("desejo obter seu acoplamento eferente");
#line 43
  testRunner.And("desejo ignorar referências para tipos de outros assemblies");
#line 44
  testRunner.Then(string.Format("obtenho {0}", ce));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
