// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FluentCodeMetrics.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calcular Complexidade Ciclomática (Cc)")]
    public partial class CalcularComplexidadeCiclomaticaCcFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CyclomaticComplexity.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Calcular Complexidade Ciclomática (Cc)", "\r\nComplexidade Ciclomática é uma métrica que indica a complexidade\r\nde um program" +
                    "a de computador. Mede a quantidade de caminhos de \r\nexecução independentes a par" +
                    "tir dum código-fonte.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcular Complexidade Ciclomática para um método")]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "EmptyVoidMethod", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "GetGreetingMessage", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "PrintHelloTenTimesUsingFor", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "PrintHelloTenTimesUsingWhile", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "GetGenreGreeting", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "TryCatchMethod", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "IHaveABadSmell", "12", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "set_DayOfBirth", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "get_DayOfBirth", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "get_Name", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "get_Age", "2", new string[0])]
        public virtual void CalcularComplexidadeCiclomaticaParaUmMetodo(string tipo, string metodo, string cc, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcular Complexidade Ciclomática para um método", exampleTags);
#line 9
 this.ScenarioSetup(scenarioInfo);
#line 10
  testRunner.Given(string.Format("que tenho um {0}", tipo));
#line 11
  testRunner.And(string.Format("nesse tipo há um método chamado {0}", metodo));
#line 12
  testRunner.When("desejo obter sua Complexidade Ciclomática (Cc)");
#line 13
  testRunner.Then(string.Format("obtenho {0}", cc));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcular Complexidade Ciclomática para um construtor")]
        [NUnit.Framework.TestCaseAttribute("Samples.EmptyClass", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Samples.MyClass", "2", new string[0])]
        public virtual void CalcularComplexidadeCiclomaticaParaUmConstrutor(string tipo, string cc, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcular Complexidade Ciclomática para um construtor", exampleTags);
#line 30
 this.ScenarioSetup(scenarioInfo);
#line 31
  testRunner.Given(string.Format("que tenho um {0}", tipo));
#line 32
  testRunner.When("desejo obter a complexidade ciclomática de seu construtor padrão");
#line 33
  testRunner.Then(string.Format("obtenho {0}", cc));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
